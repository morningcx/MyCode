Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
My code:
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result=new ArrayList<>();
        calculate(result,nums,nums.length);
        return result;
        
    }
    void calculate(List<List<Integer>> list,int[] nums,int n){
        if(n==1)
            list.add(arrayNums(nums));
        int count=nums.length-n;
        for(int i=count;i<nums.length;i++){
            swap(nums,count,i);//将第一位与其他length-1位进行交换
            calculate(list,nums,n-1);//递归分解成n-1的全排列
            swap(nums,count,i);//交换回来，不然引用都会改变
        }
    }
    void swap(int[] nums,int num1,int num2){
        int num=nums[num1];
        nums[num1]=nums[num2];
        nums[num2]=num;
    }
    List<Integer> arrayNums(int[] nums){
        List<Integer> list=new ArrayList<>();
        for(int i=0;i<nums.length;i++){
            list.add(nums[i]);
        }
        return list;
    }
}

Discuss：//大致一样
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> cur = new ArrayList<>();
        permuteCore(result, cur, nums, 0);
        return result;
    }

    private void permuteCore(List<List<Integer>> result, List<Integer> cur, int[] nums, int index){
        if(index == nums.length){
            result.add(new ArrayList<>(cur));//最后一个直接添加
            return;
        }

        for (int i = index; i < nums.length; i++) {
            swap(nums, i, index);
            cur.add(nums[index]);//确定首部数值则添加
            permuteCore(result, cur, nums, index + 1);
            cur.remove(cur.size() -1);//不论前面添加了几次，出栈时都会删除，回到第一个循环cur就成空
            swap(nums, index, i);
        }
    }
    
    private void swap(int[] a, int i, int j){
        int t = a[i];
        a[i] = a[j];
        a[j] = t;
    }
}
