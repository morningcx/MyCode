Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place, do not allocate extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1
My code:
class Solution {
    public void nextPermutation(int[] nums) {
        int n=nums.length-2;
        while(n>=0){ //从后往前找比后一个数小的数
            if(nums[n]<nums[n+1])
                break;
            n--;
        }
        if(n==-1){ //如果单挑递减，则反转并结束
            sort(nums,0);
            return ;
        }
        int i=nums.length-1;
        while(i>n){ //在n后面找比n大的最小数
            if(nums[i]>nums[n])
                break;
            i--;
        }
        swap(nums,n,i);
        sort(nums,n+1);
    }
    void swap(int[] nums,int a,int b){
        int i=nums[a];
        nums[a]=nums[b];
        nums[b]=i;
    }
    void sort(int[] nums,int after){
        for(int i=after;i<nums.length-1;i++)//冒泡
            for(int j=after;j<nums.length-1-i+after;j++){
                if(nums[j]>nums[j+1]){
                    int x=nums[j];
                    nums[j]=nums[j+1];
                    nums[j+1]=x;
                }
            }
    }
}

discuss:（差不多，因为偷偷看了一眼）
public void nextPermutation(int[] num) {
    int n=num.length;
    if(n<2)
        return;
    int index=n-1;        
    while(index>0){
        if(num[index-1]<num[index])
            break;
        index--;
    }
    if(index==0){
        reverseSort(num,0,n-1);
        return;
    }
    else{
        int val=num[index-1];
        int j=n-1;
        while(j>=index){
            if(num[j]>val)
                break;
            j--;
        }
        swap(num,j,index-1);
        reverseSort(num,index,n-1);
        return;
    }
}

public void swap(int[] num, int i, int j){
    int temp=0;
    temp=num[i];
    num[i]=num[j];
    num[j]=temp;
}

public void reverseSort(int[] num, int start, int end){ //时间复杂度要低
    if(start>end)
        return;
    for(int i=start;i<=(end+start)/2;i++)
        swap(num,i,start+end-i);
}

 
