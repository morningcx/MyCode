Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Example 1:

Input: num1 = "2", num2 = "3"
Output: "6"
Example 2:

Input: num1 = "123", num2 = "456"
Output: "56088"
Note:

The length of both num1 and num2 is < 110.
Both num1 and num2 contain only digits 0-9.
Both num1 and num2 do not contain any leading zero, except the number 0 itself.
You must not use any built-in BigInteger library or convert the inputs to integer directly.

My code：//第一次做有点乱
class Solution {
    public String multiply(String num1, String num2) {
        /* 比如：
		 * 123123*1249=153780627
		 * 0001108107
		 * 0004924920
		 * 0024624600
		 * 0123123000
                 * 0153780627(result，还要去头部的0)
                 * 循环内部的i，j有点乱
		 */
        char[] cNum1=num1.toCharArray();
		char[] cNum2=num2.toCharArray();
		char[] result=new char[cNum1.length+cNum2.length];	
		for(int j=0;j<cNum2.length;j++){
			char[] mid=result.clone();//拷贝一份
			int jin=0;
			for(int i=result.length-1;i>=0;i--){
				if (i>result.length-1-j||i<result.length-cNum1.length-j-1)//在要赋值的数值之外都为0
					result[i]=48;
				else if(i==result.length-cNum1.length-j-1)//比num1大一位要另做处理，不然会越界
					result[i]=(char)(jin+48);
				else{
					int n=(cNum1[i-cNum2.length+j]-48)*(cNum2[cNum2.length-1-j]-48)+jin;
					jin=n/10;
					result[i]=(char) ((n%10)+48);
				}
			}
			if (j>0) add(result, mid);
		}
		int count=0;
		while(result[count]=='0'&&count<result.length-1) count++;//一般只有一个0，但是其中一个乘数为0的时候就不一样。
		return String.valueOf(result).substring(count);
    }
    static void add(char[] result,char[] mid){//加上上次得出的result值赋给result
		int jin=0;
		for(int i=result.length-1;i>=0;i--){
			int n=(result[i]-48)+(mid[i]-48)+jin;
			jin=n/10;
			result[i]=(char) (n%10+48);
		}
	}
}

Discuss:
public String multiply(String num1, String num2) {
    int m = num1.length(), n = num2.length();
    int[] pos = new int[m + n];//创建一个int[]数组会好做很多
   
    for(int i = m - 1; i >= 0; i--) {
        for(int j = n - 1; j >= 0; j--) {
            int mul = (num1.charAt(i) - '0') * (num2.charAt(j) - '0'); 
            int p1 = i + j, p2 = i + j + 1;//p1是进位的位，这里直接赋值，就不用另外设一个标识jin来标识进位
            int sum = mul + pos[p2];//乘积加上进位数，然后求下一个进位和余数

            pos[p1] += sum / 10;//这里大于10没关系，因为是整形数组，下次会进行p2的余数操作就变成单个数了
            pos[p2] = (sum) % 10;
        }
    }  
    
    StringBuilder sb = new StringBuilder();
    for(int p : pos) if(!(sb.length() == 0 && p == 0)) sb.append(p);
    return sb.length() == 0 ? "0" : sb.toString();
}
