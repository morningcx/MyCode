Implement strStr().

Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

Example 1:

Input: haystack = "hello", needle = "ll"
Output: 2
Example 2:

Input: haystack = "aaaaa", needle = "bba"
Output: -1
My code:
class Solution {
    public int strStr(String haystack, String needle) {
        if(haystack==null||needle==null) return -1;
        int result=-1;
        int haylen=haystack.length();
        int needlen=needle.length();
        if(needlen==0) return 0;
        for(int i=0;i<=haylen-needlen;i++)
            for(int j=0;j<needlen;j++){
                if(haystack.charAt(j+i)==needle.charAt(j)){
                    result=i;
                    if(j==needlen-1)
                        return result;
                }
                else{
                    result=-1;
                    break;
                }
            }
        return result;
    }
}
discuss:
(1)
public int strStr(String s, String t) {
        if (t.isEmpty()) return 0; // edge case: "",""=>0  "a",""=>0
        for (int i = 0; i <= s.length() - t.length(); i++) {
            for (int j = 0; j < t.length() && s.charAt(i + j) == t.charAt(j); j++)//直接加条件跳出循环
                if (j == t.length() - 1) return i;
        }
        return -1;
    }
(2)
public class Solution {
    public int strStr(String haystack, String needle) {
        int l1 = haystack.length(), l2 = needle.length();
        if (l1 < l2) {
            return -1;
        } else if (l2 == 0) {
            return 0;
        }
        int threshold = l1 - l2;
        for (int i = 0; i <= threshold; ++i) {
            if (haystack.substring(i,i+l2).equals(needle)) {//直接抽取i至i+l2的子串与needle比较
                return i;
            }
        }
        return -1;
    }
}
