Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

My Code:
class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int len=nums.length;
        int min=Integer.MAX_VALUE;
        int result=0;
        for(int i=0;i<len-2;i++)
          for(int j=i+1;j<len-1;j++)
            for(int k=j+1;k<len;k++){
                int a=Math.abs(target-(nums[i]+nums[j]+nums[k]));
                if(a<min){
                    min=a;;
                    result=nums[i]+nums[j]+nums[k];
                }
            }
        return result;
    }
}

After discuss(I am so foolish)://一直有这种想法，因为往绝对值的方向想限制了结果
public class Solution {
    public int threeSumClosest(int[] num, int target) {
        int result = num[0] + num[1] + num[num.length - 1];
        Arrays.sort(num);
        for (int i = 0; i < num.length - 2; i++) {
            int start = i + 1, end = num.length - 1;
            while (start < end) {
                int sum = num[i] + num[start] + num[end];
                if (sum > target) {
                    end--;
                } else {
                    start++;
                }
                if (Math.abs(sum - target) < Math.abs(result - target)) {
                    result = sum;
                }
            }
        }
        return result;
    }
}
