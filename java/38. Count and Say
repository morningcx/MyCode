The count-and-say sequence is the sequence of integers with the first five terms as following:

1.     1
2.     11
3.     21
4.     1211
5.     111221
1 is read off as "one 1" or 11.
11 is read off as "two 1s" or 21.
21 is read off as "one 2, then one 1" or 1211.
Given an integer n, generate the nth term of the count-and-say sequence.

Note: Each term of the sequence of integers will be represented as a string.

Example 1:

Input: 1
Output: "1"
Example 2:

Input: 4
Output: "1211"
My code:
class Solution {
    public String countAndSay(int n) {
        if(n<=1) return "1";
        StringBuilder result=new StringBuilder("1");
        return calculate(1,n,result).toString();
    }
    StringBuilder calculate(int num,int n,StringBuilder string){
        int count=0;
        char pre=string.charAt(0);
        StringBuilder result=new StringBuilder();
        for(int i=0;i<string.length();i++){
            if(pre==string.charAt(i))
                count++;
            else{
                result.append(count+String.valueOf(pre));
                pre=string.charAt(i);
                count=1;
            }
        }
        result.append(count+String.valueOf(pre));//最后一个数字不会自动添加
        if(num==n-1)
            return result;
        return calculate(num+1,n,result);
    }
    
}
discuss://more clearly than mine
class Solution {
    public String countAndSay(int n) {
        String str = "1";
        for (int i = 1; i < n; i++) {
            str = readString(str);
        }
        return str;
        
    }
    private String readString(String str) {
        char[] chars = str.toCharArray();
        StringBuilder sb = new StringBuilder();
        for(int i = 0, count = 1; i < chars.length; i++) {
            if(i == chars.length-1 || chars[i] != chars[i+1]) {//他在这里设置
                sb.append(count);
                sb.append(chars[i]);
                count=1;
                
            } else count++;
        }
        return sb.toString();
    }
}
