Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
My code:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode begin=new ListNode(0);
        begin.next=head;
        ListNode move=begin;
        while(move.next!=null&&move.next.next!=null){
            move.next=move.next.next;
            head.next=move.next.next;
            move.next.next=head;
            move=head;
            head=head.next;
        }
        return begin.next;
    }
}
Discuss(不是固定空间):
public class Solution {
    public ListNode swapPairs(ListNode head) {
        if ((head == null)||(head.next == null))
            return head;
        ListNode n = head.next;
        head.next = swapPairs(head.next.next);
        n.next = head;
        return n;
    }
}
