You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

我的代码：
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode result=null;
        ListNode begin=null;
        int i=0;
        int add=0;
        while(l1!=null&&l2!=null){
            int sum=l1.val+l2.val+add;
            if(sum>9) add=1;
            else add=0;
            if(i==0){
                result=new ListNode(sum%10);
                begin=result;
                i++;
            }
            else{
                result.next=new ListNode(sum%10);
                result=result.next;
            }
            l1=l1.next;
            l2=l2.next;
        }
        while(l1!=null){
            int sum=l1.val+add;
            if(sum>9) add=1;
            else add=0;
            result.next=new ListNode(sum%10);
            result=result.next;
            l1=l1.next;
        }
        while(l2!=null){
            int sum=l2.val+add;
            if(sum>9) add=1;
            else add=0;
            result.next=new ListNode(sum%10);
            result=result.next;
            l2=l2.next;
        }
        if(add==1) result.next=new ListNode(1);
        return begin;
    }
}

讨论版：
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode c1 = l1;
        ListNode c2 = l2;
        ListNode sentinel = new ListNode(0);//先创建一个初值为0的对象
        ListNode d = sentinel;//创建可变ListNode对象
        int sum = 0;
        while (c1 != null || c2 != null) {
            sum /= 10;//保留进位
            if (c1 != null) {
                sum += c1.val;
                c1 = c1.next;
            }
            if (c2 != null) {
                sum += c2.val;
                c2 = c2.next;
            }
            d.next = new ListNode(sum % 10);
            d = d.next;
        }
        if (sum / 10 == 1)//若还有进位，则附加一个next
            d.next = new ListNode(1);
        return sentinel.next;//返回初始对象的next对象
    }
}
