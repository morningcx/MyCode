Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
Example 2:

Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].

My code://思路不是很清晰，逻辑有点乱，有些地方仅是为了特殊情况进行多次判断
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        List<Interval> result=new ArrayList<>();
        int has=1;
        for(int i=0;i<intervals.size();i++){
            Interval inter=intervals.get(i);
            if(inter.end<newInterval.start){//整体比new小
                result.add(inter);
                if(i==intervals.size()-1)//最后一个要添加new
                    result.add(newInterval);
            }
            else if(newInterval.end<inter.start){//整体比new大
                if(i==0||has==1){//第一个和合并以后需要多添加一次
                    result.add(newInterval);
                    has=0;
                }
                result.add(inter);//所有大于new的正常只要添加一次
            }
            else{//边界相互嵌入
                newInterval.start=Math.min(newInterval.start,inter.start);
                newInterval.end=Math.max(newInterval.end,inter.end);
                if(i==intervals.size()-1)//new包含所有，访问到最后一个时要另外添加
                    result.add(newInterval);
            }
        }
        if(intervals.size()==0)
            result.add(newInterval);
        return result;
    }
}

Discuss：
（1）//三个边界判断一样
class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        List<Interval> result = new ArrayList<Interval>();
    for (Interval i : intervals) {
        if (newInterval == null || i.end < newInterval.start)//在小于和大于new的时候进行操作
            result.add(i);
        else if (i.start > newInterval.end) {
            result.add(newInterval);
            result.add(i);
            newInterval = null;//添加完毕以后赋值null，以后的操作和整体小于new一样，进行一次添加，即返回第一个判断
        } else {
            newInterval.start = Math.min(newInterval.start, i.start);
            newInterval.end = Math.max(newInterval.end, i.end);
        }
    }
    if (newInterval != null)//当new没有插入
        result.add(newInterval);
    return result;
    }
}
（2）//先进行start排序，然后添加与合并(时间复杂度要高，但是速度快,因为判断少)
class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newI) {
        int id = 0;
        while (id < intervals.size() && intervals.get(id).start < newI.start) {
            id++;
        }
        intervals.add(id, newI);
        Interval last = null;
        List<Interval> res = new ArrayList<>();
        for (Interval val : intervals) {
            if (last == null || last.end < val.start) {
                last = val;
                res.add(last);
            } else {
                last.end = Math.max(last.end, val.end);//通过引用对last.end进行赋值
            }
        }
        return res;
    }
}
