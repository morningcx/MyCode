A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

Now consider if some obstacles are added to the grids. How many unique paths would there be?



An obstacle and empty space is marked as 1 and 0 respectively in the grid.

Note: m and n will be at most 100.

Example 1:

Input:
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
Output: 2
Explanation:
There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right

My code:
（1）//1ms 100% 判断过多，逻辑虽然比较清晰，速度无差，但是代码量大
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int row=obstacleGrid.length;
        int col=obstacleGrid[0].length;
        if(obstacleGrid[0][0]==1||obstacleGrid[row-1][col-1]==1) 
            return 0;
        int[] matrix=new int[row];
        boolean finalRow=false;
        for(int j=col-1;j>=0;j--){
            for(int i=row-1;i>=0;i--)
                if(j==col-1){
                    if(obstacleGrid[i][j]==1){
                        if(i==row-1)
                            finalRow=true;
                        break;
                    }  
                    matrix[i]=1;
                }
                else if(i==row-1){
                    if(obstacleGrid[i][j]==1){
                        finalRow=true;
                        matrix[i]=0;
                    }
                    if(!finalRow)
                        matrix[i]=1;
                    else
                        matrix[i]=0;
                }
                else{
                    if(obstacleGrid[i][j]!=1)
                        matrix[i]+=matrix[i+1];
                    else
                        matrix[i]=0;
                }
        }
        
        return matrix[0];
    }
}

0 0 0       2 1 1 
0 1 0   ->  1 0 1 -> 返回matrix[0]=2
0 0 0       1 1 1

（2）//看了discuss改进之后，除了值为1的障碍物赋值为0，其余赋值方法都是右边加下边之和
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int row=obstacleGrid.length;
        int col=obstacleGrid[0].length;
        int[] matrix=new int[row];
        matrix[row-1]=1;//初始化终点为1（如果有障碍物循环判断里会重新设为0）
        for(int j=col-1;j>=0;j--)
            for(int i=row-1;i>=0;i--){
                if(obstacleGrid[i][j]==1)
                    matrix[i]=0;
                else if(i<row-1)//除了最后一行如果碰到障碍物之后为0，没有就都为1
                    matrix[i]+=matrix[i+1];//除了最后一行以外都是本身（即右边值）加前一个（因为i<row-1所以不会越界）
            }
        return matrix[0];
    }
}

Discuss://横向赋值，思想都一样就是方向不一样
public int uniquePathsWithObstacles(int[][] obstacleGrid) {
    int width = obstacleGrid[0].length;
    int[] dp = new int[width];
    dp[0] = 1;
    for (int[] row : obstacleGrid) {
        for (int j = 0; j < width; j++) {
            if (row[j] == 1)
                dp[j] = 0;
            else if (j > 0)
                dp[j] += dp[j - 1];
        }
    }
    return dp[width - 1];
}

