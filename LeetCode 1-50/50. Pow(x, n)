Implement pow(x, n), which calculates x raised to the power n (xn).

Example 1:

Input: 2.00000, 10
Output: 1024.00000
Example 2:

Input: 2.10000, 3
Output: 9.26100
Example 3:

Input: 2.00000, -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
Note:

-100.0 < x < 100.0
n is a 32-bit signed integer, within the range [−231, 231 − 1]
My code://不会做TLE
class Solution {
    public double myPow(double x, int n) {
        if(x==0.0) return 0;
        boolean negative=false;
        if(n<0){
            n=Math.abs(n);
            negative=true;
        }
        double result=1.0;
        for(int i=0;i<n;i++)
            result*=x;
        return negative?1/result:result;
    }
}

Discuss：//递归，时间复杂度就变成了log2n
class Solution {
    public double myPow(double x, int n) {
        if (n == 0) {
            return 1.0;
        }
        if (n == Integer.MIN_VALUE) {//复数的最小值-2147483648是正数的最大值2147483647-1，所以要先做一次处理
            x = x * x;
            n = n / 2;
        }
        if (n < 0) {//最小负数如果没有做处理，这里取反后溢出，还是本身-2147483648
            x = 1.0 / x;
            n = -n;
        }
        // double half = myPow(x, n / 2);
        if (n % 2 == 0) {
            return myPow(x*x, n/2);//递归
        } else {
            return myPow(x*x, n/2) * x;
        }
    }
}
