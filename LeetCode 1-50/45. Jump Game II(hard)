Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

Example:

Input: [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2.
    Jump 1 step from index 0 to 1, then 3 steps to the last index.
Note:

You can assume that you can always reach the last index.

My code:
class Solution {
    public int jump(int[] nums) {
        if(nums.length<=1) return 0;
        int jump=nums[0];//跳跃的范围
        int count=1;//计数，长度大于1必定需要跳1次
        int max=0;//最远可以到达的位置
        for(int i=0;i<nums.length;i++){//遍历，取所有范围内的数值的可跳跃的最大值jump
            if(jump>=nums.length-1)//如果前一个数跳跃范围内的最大可跳跃值大于长度
                return count;
            if(i+nums[i]>max)//取跳跃范围内可跳最远的跳跃值的那个位置
                max=i+nums[i];
            if(i==jump){//当i增大到前一个数的跳跃范围的最后一个值
                jump=max;//重新赋值最大跳跃的值
                count++;//跳跃次数加1
            }
        }
        return 0;
    }
}

Discuss:
(1)It is simplify.
public int jump(int[] A) {
int step_count = 0;
int last_jump_max = 0;
int current_jump_max = 0;
for(int i=0; i<A.length-1; i++) {
    current_jump_max = Math.max(current_jump_max, i+A[i]);
    if( i == last_jump_max ) {
        step_count++;
        last_jump_max = current_jump_max;
    } 
}
return step_count;
