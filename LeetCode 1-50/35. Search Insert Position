Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Example 1:

Input: [1,3,5,6], 5
Output: 2
Example 2:

Input: [1,3,5,6], 2
Output: 1
Example 3:

Input: [1,3,5,6], 7
Output: 4
Example 1:

Input: [1,3,5,6], 0
Output: 0

My code://和二分法求出现第一次的数值算法一样：Search for a Range里求给出数值+1（即后一个比它大的数值）的位置
class Solution {
    public int searchInsert(int[] nums, int target) {
        int start=0;
        int end=nums.length;
        while(start<end){
            int mid=(start+end)/2;
            if(nums[mid]==target)
                return mid;
            else if(nums[mid]>=target)
                end=mid;
            else
                start=mid+1;
        }
        return start;
    }
}
discuss:
class Solution {//+1-1操作会有几种不同情况，start=end再判断一次
    public int searchInsert(int[] nums, int target) {
        int start=0;
        int end=nums.length-1;
        while(start<=end){
            int mid=(start+end)/2;
            if(nums[mid]==target)
                return mid;
            else if(nums[mid]>=target)
                end=mid-1;
            else
                start=mid+1;
        }
        return start;
    }
}
