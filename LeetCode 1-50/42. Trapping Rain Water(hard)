Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.


The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!

Example:

Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6

My code:先求总面积，然后减去方块占有的面积，即为水面积
class Solution {
    public int trap(int[] nums) {
        if(nums.length<=2) return 0;
        int start=0;
        int end=nums.length-1;
        int floor=0;//已经计算过的层数
        int v=0;//总面积
        int b=0;//方块的面积
        while(start<end){
            while(floor>=nums[start]&&start<end) {b+=nums[start];start++;}//比层数小的，已经被水覆盖所以不用计算，略过，并求方块的面积
            while(floor>=nums[end]&&start<end) {b+=nums[end];end--;}
            int min=Math.min(nums[start],nums[end]);//取最短的那个长度
            v+=(min-floor)*(end-start+1);//求水的面积
            floor=min;//层数增加
        }
        return v-b-nums[start];//最后start=end那一列方块没有计算要减去
    }
}

Discuss：
