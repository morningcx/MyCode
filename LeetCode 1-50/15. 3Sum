Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
My Code(Time Limit Exceeded):
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        int len=nums.length;
        List<List<Integer>> outside=new ArrayList<>();
        Map<List<Integer>,Boolean> sMap=new HashMap<>();
        for(int i=0;i<len-2;i++){
            if(nums[i]>0) break;
            for(int j=i+1;j<len-1;j++){
                for(int k=j+1;k<len;k++)
                    if(nums[i]+nums[j]+nums[k]==0){
                        List<Integer> inside=new ArrayList<>();
                        inside.add(nums[i]);
                        inside.add(nums[j]);
                        inside.add(nums[k]);
                        if(!sMap.containsKey(inside)){
                            sMap.put(inside,true);
                            outside.add(inside);
                        }
                        
                    }
            }
        }
        
        return outside;
    }
}

After discuss:
class Solution {
    public List<List<Integer>> threeSum(int[] num) {
        Arrays.sort(num);
    List<List<Integer>> res = new LinkedList<>(); 
    for (int i = 0; i < num.length-2; i++) {
        if (i == 0 || (i > 0 && num[i] != num[i-1])) {//当为第一个数或者后面的数不重复时
            int lo = i+1, hi = num.length-1, sum = 0 - num[i];
            while (lo < hi) {
                if (num[lo] + num[hi] == sum) {
                    res.add(Arrays.asList(num[i], num[lo], num[hi]));
                    while (lo < hi && num[lo] == num[lo+1]) lo++;//有重复数组移动指针
                    while (lo < hi && num[hi] == num[hi-1]) hi--;
                    lo++; hi--;
                } else if (num[lo] + num[hi] < sum) lo++;//小于结果时，移动左指针（若下一个数重复，继续循环移动）
                else hi--;//大于等于时，移动右指针
           }
        }
    }
    return res;
    }
}
